// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/galihfebrizki/dbo-api/internal/controllers"
	"github.com/galihfebrizki/dbo-api/internal/repositories"
	"github.com/galihfebrizki/dbo-api/internal/services"
	"github.com/galihfebrizki/dbo-api/utils/gorm"
	"github.com/galihfebrizki/dbo-api/utils/rabbitmq"
	"github.com/galihfebrizki/dbo-api/utils/redis"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializedServer(masterParam gorm.DBParamMasterConn, slaveParam gorm.DBParamSlaveConn, redisParam redis.RedisParam, mqParam rabbitmq.RabbitMQParam) *gin.Engine {
	iGormMaster := gorm.NewGormMasterConnectionPostgres(masterParam)
	iGormSlave := gorm.NewGormSlaveConnectionPostgres(slaveParam)
	iredis := redis.NewRedisConn(redisParam)
	iHealthRepository := repositories.NewHealthRepository(iGormMaster, iGormSlave, iredis)
	iHealthService := services.NewHealthService(iHealthRepository)
	healthController := controllers.NewHealthController(iHealthService)
	iRabbitMQ := rabbitmq.NewRabbitMQConn(mqParam)
	iOrderRepository := repositories.NewOrderRepository(iGormMaster, iGormSlave, iredis, iRabbitMQ)
	iItemRepository := repositories.NewItemRepository(iGormMaster, iGormSlave, iredis, iRabbitMQ)
	iUserRepository := repositories.NewUserRepository(iGormMaster, iGormSlave, iredis, iRabbitMQ)
	iUserService := services.NewUserService(iUserRepository, iOrderRepository)
	iOrderService := services.NewOrderService(iOrderRepository, iItemRepository, iUserService)
	orderController := controllers.NewOrderController(iOrderService, iUserService)
	userController := controllers.NewUserController(iUserService)
	iPaymentRepository := repositories.NewPaymentRepository(iGormMaster, iGormSlave, iredis, iRabbitMQ)
	iPaymentService := services.NewPaymentService(iPaymentRepository, iOrderRepository)
	paymentController := controllers.NewPaymentController(iPaymentService)
	engine := NewRouter(healthController, orderController, userController, paymentController)
	return engine
}

func InitializedConsumer(masterParam gorm.DBParamMasterConn, slaveParam gorm.DBParamSlaveConn, redisParam redis.RedisParam, mqParam rabbitmq.RabbitMQParam) *AmqpController {
	iRabbitMQ := rabbitmq.NewRabbitMQConn(mqParam)
	iGormMaster := gorm.NewGormMasterConnectionPostgres(masterParam)
	iGormSlave := gorm.NewGormSlaveConnectionPostgres(slaveParam)
	iredis := redis.NewRedisConn(redisParam)
	iPaymentRepository := repositories.NewPaymentRepository(iGormMaster, iGormSlave, iredis, iRabbitMQ)
	iOrderRepository := repositories.NewOrderRepository(iGormMaster, iGormSlave, iredis, iRabbitMQ)
	iPaymentService := services.NewPaymentService(iPaymentRepository, iOrderRepository)
	paymentController := controllers.NewPaymentController(iPaymentService)
	amqpController := NewAmqpConsumer(iRabbitMQ, paymentController)
	return amqpController
}

// wire.go:

var pkgSet = wire.NewSet(gorm.NewGormMasterConnectionPostgres, gorm.NewGormSlaveConnectionPostgres, redis.NewRedisConn, rabbitmq.NewRabbitMQConn)

var setHealth = wire.NewSet(repositories.NewHealthRepository, services.NewHealthService, controllers.NewHealthController)

var setPayment = wire.NewSet(repositories.NewPaymentRepository, services.NewPaymentService, controllers.NewPaymentController)

var setOrder = wire.NewSet(repositories.NewOrderRepository, services.NewOrderService, controllers.NewOrderController)

var setUser = wire.NewSet(repositories.NewUserRepository, services.NewUserService, controllers.NewUserController)

var setItem = wire.NewSet(repositories.NewItemRepository)
